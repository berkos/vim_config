class RotoPassController < ApplicationController

  skip_before_action :verify_authenticity_token

  def register

    response = RotoPassUser.api_authentication params[:session_key]

    if response['valid'] == 1
      roto_pass_user = RotoPassUser.new user_params
      roto_pass_user.associate_with_user
      roto_pass_user.save

      render nothing: true, status: 200, content_type: 'text/html'
    else
      render inline: 'Error: not valid session key', status: :unprocessable_entity
    end
  end

  def single_sign_on
    response = RotoPassUser.api_authentication params[:session_key]
    if response['valid'] == 1
      begin
        roto_user = RotoPassUser.find_by(roto_pass_user_id: response['user_id'])

        sign_in_and_redirect roto_user.user
      rescue => e
        ErrorMailer.roto_pass_log_in(e, params.to_s)
        sign_in_and_redirect User.find_by(email: 'roto_pass@fantasyinsiders.com')
      end
    else
      redirect_to root_path, notice: 'Error: not valid session key'
    end
  end


  def user_params
    params[:roto_pass_user_id] = params[:user_id]
    params.permit(:first_name, :last_name, :email, :zipcode, :date_start, :date_expires, :session_key, :roto_pass_user_id)
  end
end
